╔═══════════════════════════════════════════════════════════════════════════════╗
║                    DOCUMENTACIÓN - SISTEMA DE RUTAS CON                       ║
║                        AUTENTICACIÓN EN REACT + ROUTER                        ║
╚═══════════════════════════════════════════════════════════════════════════════╝

═══════════════════════════════════════════════════════════════════════════════
📋 TABLA DE CONTENIDOS
═══════════════════════════════════════════════════════════════════════════════

1. Introducción
2. Estructura del Proyecto
3. Flujo de Autenticación
4. Rutas y Protección
5. Componentes Principales
6. Cómo Funciona Paso a Paso
7. Casos de Uso
8. Guía de Prueba
9. Personalización y Extensión


═══════════════════════════════════════════════════════════════════════════════
1️⃣ INTRODUCCIÓN
═══════════════════════════════════════════════════════════════════════════════

Este proyecto implementa un sistema completo de rutas protegidas en React usando:

✅ react-router-dom v6 - Para navegación entre páginas
✅ Context API - Para gestión de estado de autenticación
✅ localStorage - Para persistencia de sesión
✅ TypeScript - Para tipado seguro

El sistema permite:
- Rutas públicas (accesibles sin login)
- Rutas privadas (requieren autenticación)
- Rutas con permisos específicos (requieren roles como ADMIN)
- Redirecciones automáticas según estado de autenticación


═══════════════════════════════════════════════════════════════════════════════
2️⃣ ESTRUCTURA DEL PROYECTO
═══════════════════════════════════════════════════════════════════════════════

frontend/
├── src/
│   ├── main.tsx                    # Punto de entrada, configura Router y Auth
│   ├── App.tsx                     # Componente principal con rutas
│   ├── index.css                   # Estilos globales
│   │
│   ├── auth/
│   │   └── AuthProvider.tsx        # Contexto de autenticación
│   │
│   ├── routes/
│   │   └── ProtectedRoute.tsx      # Componente para proteger rutas
│   │
│   ├── pages/
│   │   ├── Login.tsx               # Página pública de login
│   │   ├── Home.tsx                # Página privada - Dashboard
│   │   ├── Products.tsx            # Página privada - Catálogo
│   │   └── Admin.tsx               # Página privada con rol ADMIN
│   │
│   └── types/
│       └── user.ts                 # Tipos de usuario (opcional)
│
└── package.json                    # Dependencias (incluye react-router-dom)


═══════════════════════════════════════════════════════════════════════════════
3️⃣ FLUJO DE AUTENTICACIÓN
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                         FLUJO DE AUTENTICACIÓN                               │
└─────────────────────────────────────────────────────────────────────────────┘

1. USUARIO NO AUTENTICADO
   ↓
   Usuario visita la app (/)
   ↓
   AuthProvider verifica localStorage
   ↓
   No hay datos → isAuthenticated = false
   ↓
   Redirección automática a /login


2. PROCESO DE LOGIN
   ↓
   Usuario completa formulario (nombre + rol)
   ↓
   AuthProvider.login() se ejecuta:
     - Guarda datos en localStorage como JSON
     - Actualiza estado: user = {name, role}
     - isAuthenticated = true
   ↓
   Redirección automática a /home


3. USUARIO AUTENTICADO
   ↓
   Usuario navega por la app
   ↓
   ProtectedRoute verifica en cada ruta:
     - ¿Está autenticado? → Permite acceso
     - ¿No está autenticado? → Redirige a /login
     - ¿Requiere rol ADMIN y no lo tiene? → Redirige a /home


4. PROCESO DE LOGOUT
   ↓
   Usuario hace clic en "Salir"
   ↓
   AuthProvider.logout() se ejecuta:
     - Elimina datos de localStorage
     - Actualiza estado: user = null
     - isAuthenticated = false
   ↓
   Redirección automática a /login


═══════════════════════════════════════════════════════════════════════════════
4️⃣ RUTAS Y PROTECCIÓN
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────┬──────────────┬─────────────────┬───────────────────────────┐
│ RUTA            │ TIPO         │ REQUISITOS      │ REDIRECCIÓN SI NO CUMPLE  │
├─────────────────┼──────────────┼─────────────────┼───────────────────────────┤
│ /               │ Dinámica     │ Ninguno         │ → /home (si auth)         │
│                 │              │                 │ → /login (si no auth)     │
├─────────────────┼──────────────┼─────────────────┼───────────────────────────┤
│ /login          │ Pública      │ Ninguno         │ → /home (si ya está auth) │
├─────────────────┼──────────────┼─────────────────┼───────────────────────────┤
│ /home           │ Privada      │ Autenticación   │ → /login                  │
├─────────────────┼──────────────┼─────────────────┼───────────────────────────┤
│ /products       │ Privada      │ Autenticación   │ → /login                  │
├─────────────────┼──────────────┼─────────────────┼───────────────────────────┤
│ /admin          │ Privada+Rol  │ Auth + ADMIN    │ → /login (si no auth)     │
│                 │              │                 │ → /home (si no ADMIN)     │
└─────────────────┴──────────────┴─────────────────┴───────────────────────────┘


CONFIGURACIÓN EN App.tsx:
────────────────────────────────────────────────────────────────────────────────

<Routes>
  {/* Ruta raíz - Redirección dinámica */}
  <Route 
    path="/" 
    element={<Navigate to={isAuthenticated ? '/home' : '/login'} replace />} 
  />

  {/* Ruta pública */}
  <Route path="/login" element={<Login />} />

  {/* Rutas privadas - Requieren autenticación */}
  <Route element={<ProtectedRoute />}>
    <Route path="/home" element={<Home />} />
    <Route path="/products" element={<Products />} />
  </Route>

  {/* Ruta privada con rol ADMIN */}
  <Route element={<ProtectedRoute requiredRole="ADMIN" />}>
    <Route path="/admin" element={<Admin />} />
  </Route>

  {/* Ruta 404 */}
  <Route path="*" element={<h2>Not found</h2>} />
</Routes>


═══════════════════════════════════════════════════════════════════════════════
5️⃣ COMPONENTES PRINCIPALES
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ 🔐 AuthProvider.tsx                                                          │
└─────────────────────────────────────────────────────────────────────────────┘

RESPONSABILIDADES:
  • Crear contexto de autenticación
  • Gestionar estado del usuario (user, isAuthenticated)
  • Persistir sesión en localStorage
  • Proveer funciones login() y logout()
  • Recuperar sesión al cargar la app

PROPIEDADES EXPORTADAS:
  - user: User | null              → Datos del usuario actual
  - isAuthenticated: boolean       → Si hay usuario logueado
  - login(name, role): void        → Función para iniciar sesión
  - logout(): void                 → Función para cerrar sesión

HOOK PERSONALIZADO:
  useAuth() → Retorna el contexto completo


┌─────────────────────────────────────────────────────────────────────────────┐
│ 🛡️ ProtectedRoute.tsx                                                        │
└─────────────────────────────────────────────────────────────────────────────┘

RESPONSABILIDADES:
  • Verificar si el usuario está autenticado
  • Verificar si el usuario tiene el rol requerido (opcional)
  • Redirigir a /login si no está autenticado
  • Redirigir a /home si no tiene el rol necesario
  • Renderizar <Outlet /> para mostrar las rutas hijas si todo OK

PARÁMETROS:
  - requiredRole?: string          → Rol necesario (ej: "ADMIN")

LÓGICA:
  1. Obtiene isAuthenticated y user del contexto
  2. Si !isAuthenticated → <Navigate to="/login" />
  3. Si requiredRole && user.role !== requiredRole → <Navigate to="/home" />
  4. Caso contrario → <Outlet /> (renderiza la ruta hija)


┌─────────────────────────────────────────────────────────────────────────────┐
│ 📄 Login.tsx                                                                 │
└─────────────────────────────────────────────────────────────────────────────┘

RESPONSABILIDADES:
  • Mostrar formulario de login
  • Capturar nombre y rol del usuario
  • Llamar a login() del AuthProvider
  • Redirigir a /home si ya está autenticado

ESTADOS LOCALES:
  - name: string                   → Nombre ingresado
  - role: string                   → Rol seleccionado (USER o ADMIN)

EFECTO:
  useEffect que verifica isAuthenticated y redirige a /home si ya está logueado


┌─────────────────────────────────────────────────────────────────────────────┐
│ 🏠 Home.tsx, 📦 Products.tsx, ⚡ Admin.tsx                                   │
└─────────────────────────────────────────────────────────────────────────────┘

RESPONSABILIDADES:
  • Mostrar contenido de la página
  • Usar useAuth() para obtener datos del usuario
  • Renderizar UI personalizada según el usuario

CARACTERÍSTICAS:
  - Acceden al usuario mediante: const { user } = useAuth()
  - Muestran información personalizada (nombre, rol)
  - Admin.tsx solo es accesible con rol ADMIN


═══════════════════════════════════════════════════════════════════════════════
6️⃣ CÓMO FUNCIONA PASO A PASO
═══════════════════════════════════════════════════════════════════════════════

ESCENARIO 1: Usuario visita la app por primera vez
───────────────────────────────────────────────────────────────────────────────

1. Usuario abre http://localhost:5173/

2. React carga main.tsx:
   - Se monta <BrowserRouter>
   - Se monta <AuthProvider>
   - Se monta <App />

3. AuthProvider se inicializa:
   useEffect(() => {
     const raw = localStorage.getItem('auth')  // → null (primera vez)
     if (raw) {
       setUser(JSON.parse(raw))
     }
   }, [])
   Resultado: user = null, isAuthenticated = false

4. App.tsx renderiza:
   <Route path="/" element={<Navigate to={isAuthenticated ? '/home' : '/login'} />} />
   Como isAuthenticated = false → Redirige a /login

5. Se renderiza Login.tsx:
   - Muestra formulario
   - Usuario puede ingresar nombre y elegir rol


ESCENARIO 2: Usuario se loggea
───────────────────────────────────────────────────────────────────────────────

1. Usuario completa formulario en /login:
   - Nombre: "Juan"
   - Rol: "ADMIN"
   - Hace clic en "Ingresar"

2. Se ejecuta la función submit():
   const submit = (e: FormEvent) => {
     e.preventDefault()
     if (!name) return alert('Ingrese un nombre')
     login(name, role)  // Llama a AuthProvider.login()
   }

3. AuthProvider.login() se ejecuta:
   const login = (name: string, role: string) => {
     const u = { name, role }                    // u = {name: "Juan", role: "ADMIN"}
     localStorage.setItem('auth', JSON.stringify(u))  // Guarda en localStorage
     setUser(u)                                   // Actualiza estado
     navigate('/home', { replace: true })        // Redirige a /home
   }

4. Estado actualizado:
   - user = {name: "Juan", role: "ADMIN"}
   - isAuthenticated = true

5. Navigate automático a /home


ESCENARIO 3: Usuario navega por la app
───────────────────────────────────────────────────────────────────────────────

1. Usuario está en /home

2. Usuario hace clic en "Productos" en el navbar:
   <Link to="/products">📦 Productos</Link>

3. React Router cambia a /products

4. App.tsx tiene configurado:
   <Route element={<ProtectedRoute />}>
     <Route path="/products" element={<Products />} />
   </Route>

5. ProtectedRoute verifica:
   const { isAuthenticated, user } = useAuth()
   // isAuthenticated = true, user = {name: "Juan", role: "ADMIN"}
   
   if (!isAuthenticated) {
     return <Navigate to="/login" />  // ❌ No se ejecuta
   }
   
   return <Outlet />  // ✅ Permite acceso, renderiza <Products />

6. Se muestra Products.tsx


ESCENARIO 4: Usuario intenta acceder a /admin sin rol ADMIN
───────────────────────────────────────────────────────────────────────────────

1. Usuario se loggeó con rol "USER" (no "ADMIN")
   - user = {name: "María", role: "USER"}

2. Usuario intenta acceder a /admin mediante URL directa o navbar

3. App.tsx tiene:
   <Route element={<ProtectedRoute requiredRole="ADMIN" />}>
     <Route path="/admin" element={<Admin />} />
   </Route>

4. ProtectedRoute verifica:
   const { isAuthenticated, user } = useAuth()
   // isAuthenticated = true, user = {name: "María", role: "USER"}
   
   if (!isAuthenticated) {
     return <Navigate to="/login" />  // ❌ No se ejecuta (está autenticado)
   }
   
   if (requiredRole && user?.role !== requiredRole) {
     // "ADMIN" !== "USER" → Condición TRUE
     return <Navigate to="/home" replace />  // ✅ Redirige a /home
   }

5. Usuario es redirigido a /home automáticamente


ESCENARIO 5: Usuario hace logout
───────────────────────────────────────────────────────────────────────────────

1. Usuario hace clic en botón "Salir" del navbar

2. Se ejecuta:
   <button onClick={logout}>🚪 Salir</button>

3. AuthProvider.logout() se ejecuta:
   const logout = () => {
     localStorage.removeItem('auth')        // Elimina de localStorage
     setUser(null)                          // Limpia estado
     navigate('/login', { replace: true }) // Redirige a login
   }

4. Estado actualizado:
   - user = null
   - isAuthenticated = false

5. Usuario es redirigido a /login


ESCENARIO 6: Usuario recarga la página (F5)
───────────────────────────────────────────────────────────────────────────────

1. Usuario está autenticado en /home

2. Usuario presiona F5 (recarga completa)

3. React se desmonta y vuelve a montarse

4. AuthProvider se inicializa nuevamente:
   useEffect(() => {
     const raw = localStorage.getItem('auth')  
     // → '{"name":"Juan","role":"ADMIN"}' (persiste en localStorage)
     
     if (raw) {
       try {
         setUser(JSON.parse(raw))  // Recupera la sesión
       } catch {
         localStorage.removeItem('auth')
       }
     }
   }, [])

5. Estado restaurado:
   - user = {name: "Juan", role: "ADMIN"}
   - isAuthenticated = true

6. Usuario permanece en /home sin necesidad de volver a loguearse


═══════════════════════════════════════════════════════════════════════════════
7️⃣ CASOS DE USO
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ CASO 1: Usuario intenta acceder a /home sin estar logueado                  │
└─────────────────────────────────────────────────────────────────────────────┘

ENTRADA:  Usuario escribe en navegador: http://localhost:5173/home
ESTADO:   isAuthenticated = false
RESULTADO: Redirigido automáticamente a /login


┌─────────────────────────────────────────────────────────────────────────────┐
│ CASO 2: Usuario logueado intenta volver a /login                            │
└─────────────────────────────────────────────────────────────────────────────┘

ENTRADA:  Usuario autenticado navega a /login
ESTADO:   isAuthenticated = true
LÓGICA:   Login.tsx tiene un useEffect que verifica esto
RESULTADO: Redirigido automáticamente a /home


┌─────────────────────────────────────────────────────────────────────────────┐
│ CASO 3: Usuario con rol USER intenta acceder a /admin                       │
└─────────────────────────────────────────────────────────────────────────────┘

ENTRADA:  Usuario autenticado con role="USER" navega a /admin
ESTADO:   isAuthenticated = true, user.role = "USER"
LÓGICA:   ProtectedRoute verifica: requiredRole="ADMIN" !== user.role
RESULTADO: Redirigido automáticamente a /home


┌─────────────────────────────────────────────────────────────────────────────┐
│ CASO 4: Usuario con rol ADMIN accede a /admin                               │
└─────────────────────────────────────────────────────────────────────────────┘

ENTRADA:  Usuario autenticado con role="ADMIN" navega a /admin
ESTADO:   isAuthenticated = true, user.role = "ADMIN"
LÓGICA:   ProtectedRoute verifica: requiredRole="ADMIN" === user.role ✅
RESULTADO: Acceso permitido, se muestra Admin.tsx


┌─────────────────────────────────────────────────────────────────────────────┐
│ CASO 5: Usuario manipula localStorage manualmente                           │
└─────────────────────────────────────────────────────────────────────────────┘

ENTRADA:  Usuario abre DevTools y modifica localStorage.auth con JSON inválido
ESTADO:   Datos corruptos en localStorage
LÓGICA:   AuthProvider tiene try/catch:
          try {
            setUser(JSON.parse(raw))
          } catch {
            localStorage.removeItem('auth')  // Limpia datos corruptos
          }
RESULTADO: Sesión eliminada, usuario debe volver a loguearse


═══════════════════════════════════════════════════════════════════════════════
8️⃣ GUÍA DE PRUEBA
═══════════════════════════════════════════════════════════════════════════════

PASO 1: Iniciar el servidor
───────────────────────────────────────────────────────────────────────────────
cd c:\Programacion\MDW\frontend
npm run dev

Abrir: http://localhost:5173/


PASO 2: Probar ruta raíz
───────────────────────────────────────────────────────────────────────────────
✅ Al abrir / debes ser redirigido automáticamente a /login


PASO 3: Probar acceso a rutas privadas sin login
───────────────────────────────────────────────────────────────────────────────
✅ Intenta acceder a http://localhost:5173/home
   → Debes ser redirigido a /login

✅ Intenta acceder a http://localhost:5173/products
   → Debes ser redirigido a /login

✅ Intenta acceder a http://localhost:5173/admin
   → Debes ser redirigido a /login


PASO 4: Probar login con rol USER
───────────────────────────────────────────────────────────────────────────────
1. En /login, ingresa:
   - Nombre: "Juan"
   - Rol: "USER"
   - Clic en "Ingresar"

✅ Debes ser redirigido a /home
✅ Debes ver navbar con tu nombre y rol "USER"
✅ Debes poder navegar a /products
✅ El botón "Admin" NO debe aparecer en el navbar (solo para ADMIN)

2. Intenta acceder directamente a /admin escribiendo en la URL:
   http://localhost:5173/admin

✅ Debes ser redirigido automáticamente a /home


PASO 5: Probar logout
───────────────────────────────────────────────────────────────────────────────
✅ Haz clic en "Salir" en el navbar
✅ Debes ser redirigido a /login
✅ El navbar debe desaparecer
✅ Si intentas acceder a /home nuevamente, debes volver a /login


PASO 6: Probar login con rol ADMIN
───────────────────────────────────────────────────────────────────────────────
1. En /login, ingresa:
   - Nombre: "Admin"
   - Rol: "ADMIN"
   - Clic en "Ingresar"

✅ Debes ser redirigido a /home
✅ Debes ver navbar con tu nombre y rol "ADMIN"
✅ Debes ver el botón "Admin" en el navbar
✅ Debes poder navegar a /admin sin restricciones
✅ Debes ver el panel de administración completo


PASO 7: Probar persistencia de sesión
───────────────────────────────────────────────────────────────────────────────
1. Estando logueado, presiona F5 (recarga la página)

✅ Debes permanecer logueado
✅ Tu nombre y rol deben seguir mostrándose
✅ No debes ser enviado a /login


PASO 8: Probar datos en localStorage
───────────────────────────────────────────────────────────────────────────────
1. Abre DevTools (F12)
2. Ve a: Application → Storage → Local Storage → http://localhost:5173
3. Busca la clave "auth"

✅ Si estás logueado, debe contener: {"name":"...","role":"..."}
✅ Si haces logout, la clave debe desaparecer


PASO 9: Probar redirección desde /login estando logueado
───────────────────────────────────────────────────────────────────────────────
1. Estando logueado, intenta acceder a /login escribiendo en la URL

✅ Debes ser redirigido automáticamente a /home
✅ No debes ver el formulario de login


═══════════════════════════════════════════════════════════════════════════════
9️⃣ PERSONALIZACIÓN Y EXTENSIÓN
═══════════════════════════════════════════════════════════════════════════════

AGREGAR MÁS ROLES
───────────────────────────────────────────────────────────────────────────────

1. En Login.tsx, agrega más opciones:
   <option value="USER">USER</option>
   <option value="ADMIN">ADMIN</option>
   <option value="MODERATOR">MODERATOR</option>

2. Crea rutas protegidas para ese rol:
   <Route element={<ProtectedRoute requiredRole="MODERATOR" />}>
     <Route path="/moderation" element={<Moderation />} />
   </Route>


CONECTAR CON BACKEND REAL
───────────────────────────────────────────────────────────────────────────────

1. En AuthProvider.tsx, modifica login():
   const login = async (username: string, password: string) => {
     const response = await fetch('/api/login', {
       method: 'POST',
       headers: { 'Content-Type': 'application/json' },
       body: JSON.stringify({ username, password })
     })
     const data = await response.json()
     
     if (data.token) {
       localStorage.setItem('auth', JSON.stringify(data))
       setUser(data.user)
       navigate('/home')
     }
   }

2. Agregar verificación de token en cada request


AGREGAR TIEMPO DE EXPIRACIÓN DE SESIÓN
───────────────────────────────────────────────────────────────────────────────

1. Al hacer login, guarda timestamp:
   const u = { name, role, expiresAt: Date.now() + 3600000 } // 1 hora

2. En AuthProvider, verifica expiración:
   useEffect(() => {
     const raw = localStorage.getItem('auth')
     if (raw) {
       const data = JSON.parse(raw)
       if (data.expiresAt < Date.now()) {
         logout()  // Sesión expirada
       } else {
         setUser(data)
       }
     }
   }, [])


AGREGAR LOADING STATE
───────────────────────────────────────────────────────────────────────────────

1. En AuthProvider:
   const [loading, setLoading] = useState(true)
   
   useEffect(() => {
     const raw = localStorage.getItem('auth')
     if (raw) {
       setUser(JSON.parse(raw))
     }
     setLoading(false)  // Termina de cargar
   }, [])

2. En ProtectedRoute:
   if (loading) return <div>Cargando...</div>


═══════════════════════════════════════════════════════════════════════════════
📞 CONTACTO Y SOPORTE
═══════════════════════════════════════════════════════════════════════════════

Si tienes dudas o problemas:

1. Revisa los errores en la consola del navegador (F12)
2. Verifica que el servidor esté corriendo (npm run dev)
3. Verifica que react-router-dom esté instalado (npm list react-router-dom)
4. Limpia localStorage si hay datos corruptos
5. Revisa que todos los archivos estén en su lugar según la estructura


═══════════════════════════════════════════════════════════════════════════════
✅ CHECKLIST DE IMPLEMENTACIÓN
═══════════════════════════════════════════════════════════════════════════════

[✓] react-router-dom instalado
[✓] AuthProvider configurado con Context API
[✓] localStorage para persistencia de sesión
[✓] ProtectedRoute para rutas privadas
[✓] Rutas públicas y privadas configuradas
[✓] Protección por roles (ADMIN)
[✓] Redirecciones automáticas implementadas
[✓] Navbar dinámico según autenticación
[✓] Páginas con diseño profesional
[✓] TypeScript configurado correctamente
[✓] Manejo de errores en localStorage


═══════════════════════════════════════════════════════════════════════════════

                         🎉 ¡PROYECTO COMPLETO Y FUNCIONAL! 🎉

═══════════════════════════════════════════════════════════════════════════════
